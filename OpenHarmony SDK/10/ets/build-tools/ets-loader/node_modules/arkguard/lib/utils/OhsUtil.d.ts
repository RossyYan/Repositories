import { ElementAccessExpression, InterfaceDeclaration, PropertyName, TypeAliasDeclaration } from 'typescript';
import type { ClassDeclaration, ClassExpression, EnumDeclaration, ObjectLiteralExpression, Statement, StructDeclaration } from 'typescript';
import { OhPackType } from './TransformUtil';
export declare const stringPropsSet: Set<string>;
/**
 * find openHarmony module import statement
 * example:
 *  jsbundle - var _ohos = _interopRequireDefault(requireModule('@ohos.hilog'));
 *  esmodule - var hilog = globalThis.requireNapi('hilog') || ...
 *
 * @param node
 * @param moduleName full name of imported module, must check format before called, example:
 *  - '@ohos.hilog'
 *  - '@ohos.application.Ability'
 */
export declare function findOhImportStatement(node: Statement, moduleName: string): OhPackType;
/**
 * used to ignore user defined ui component class property name
 * @param classNode
 */
export declare function isViewPUBasedClass(classNode: ClassDeclaration): boolean;
export declare function collectPropertyNamesAndStrings(memberName: PropertyName, propertySet: Set<string>): void;
export declare function getElementAccessExpressionProperties(elementAccessExpressionNode: ElementAccessExpression, propertySet: Set<string>): void;
export declare function getTypeAliasProperties(typeAliasNode: TypeAliasDeclaration, propertySet: Set<string>): void;
/**
 * export interface interfaceName {
 *  a1: number;
 *  "a2": number;
 *  ["a3"]: number;
 * }
 */
export declare function getInterfaceProperties(interfaceNode: InterfaceDeclaration, propertySet: Set<string>): void;
export declare function getClassProperties(classNode: ClassDeclaration | ClassExpression | StructDeclaration, propertySet: Set<string>): void;
export declare function getEnumProperties(enumNode: EnumDeclaration, propertySet: Set<string>): void;
export declare function getObjectProperties(objNode: ObjectLiteralExpression, propertySet: Set<string>): void;
