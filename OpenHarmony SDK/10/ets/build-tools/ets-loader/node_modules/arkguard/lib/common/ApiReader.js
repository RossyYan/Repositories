"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readProjectProperties = exports.needReadApiInfo = exports.initPlugin = exports.scanProjectConfig = void 0;
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const FileUtils_1 = require("../utils/FileUtils");
const ApiExtractor_1 = require("./ApiExtractor");
const ListUtil_1 = require("../utils/ListUtil");
exports.scanProjectConfig = {};
/**
 * if rename property is not open, api read and extract can be skipped
 *
 * init plugin, read api info of openHarmony sdk and generate file of reserved name, property and string.
 * @param sdkDir absolute path like D:\\HuaweiApp\\ohsdk
 * @param outputDir
 */
function initPlugin(sdkDir, outputDir) {
    // create sdk api file if not exist
    const ohSdkPath = path_1.default.resolve(sdkDir);
    if (!ohSdkPath) {
        console.error('SDK path is not found.');
    }
    const apiVersions = [''];
    apiVersions.forEach((versionString) => {
        ApiExtractor_1.ApiExtractor.parseOhSdk(ohSdkPath, versionString, true, outputDir);
    });
}
exports.initPlugin = initPlugin;
/**
 * need read api info or not
 * @param customProfiles
 */
function needReadApiInfo(customProfiles) {
    return customProfiles.mNameObfuscation &&
        customProfiles.mNameObfuscation.mEnable &&
        customProfiles.mNameObfuscation.mRenameProperties;
}
exports.needReadApiInfo = needReadApiInfo;
/**
 * read project reserved properties
 * @param projectPaths can be dir or file
 * @param customProfiles
 */
function readProjectProperties(projectPaths, customProfiles, isOHProject) {
    var _a;
    if (!needReadApiInfo(customProfiles) && !isOHProject) {
        return [];
    }
    exports.scanProjectConfig.mKeepStringProperty = (_a = customProfiles.mNameObfuscation) === null || _a === void 0 ? void 0 : _a.mKeepStringProperty;
    for (const projectPath of projectPaths) {
        if (!fs_1.default.existsSync(projectPath)) {
            console.error(`File ${FileUtils_1.FileUtils.getFileName(projectPath)} is not found.`);
            return [];
        }
        const sourcPath = isOHProject ? path_1.default.join(projectPath, 'src', 'main') : projectPath;
        const projProperties = ApiExtractor_1.ApiExtractor.parseCommonProject(sourcPath);
        const sdkProperties = readThirdPartyLibProperties(projectPath);
        // read project code export names
        customProfiles.mNameObfuscation.mReservedProperties = ListUtil_1.ListUtil.uniqueMergeList(projProperties, customProfiles.mNameObfuscation.mReservedProperties);
        // read project lib export names
        if (sdkProperties) {
            customProfiles.mNameObfuscation.mReservedProperties = ListUtil_1.ListUtil.uniqueMergeList(sdkProperties, customProfiles.mNameObfuscation.mReservedProperties);
        }
    }
    return customProfiles.mNameObfuscation.mReservedProperties;
}
exports.readProjectProperties = readProjectProperties;
function readThirdPartyLibProperties(projectPath) {
    let reservedProperties = [];
    if (!fs_1.default.lstatSync(projectPath).isDirectory()) {
        return undefined;
    }
    // find third party lib and extract reserved names
    const fileNames = fs_1.default.readdirSync(projectPath);
    const hasNodeModules = fileNames.includes('node_modules');
    const hasOHModules = fileNames.includes('oh_modules');
    if (!hasNodeModules && !hasOHModules) {
        return undefined;
    }
    if (hasNodeModules && hasOHModules) {
        throw new Error(`There are both node_modules and oh_modules folders in ${projectPath}`);
    }
    let filePath = '';
    if (hasNodeModules) {
        filePath = path_1.default.join(projectPath, 'node_modules');
    }
    else {
        filePath = path_1.default.join(projectPath, 'oh_modules');
    }
    const properties = ApiExtractor_1.ApiExtractor.parseThirdPartyLibs(filePath);
    reservedProperties = [...reservedProperties, ...properties];
    const propertySet = new Set(reservedProperties);
    return Array.from(propertySet);
}
//# sourceMappingURL=ApiReader.js.map