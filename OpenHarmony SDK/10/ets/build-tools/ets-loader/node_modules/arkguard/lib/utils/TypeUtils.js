"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeUtils = void 0;
const typescript_1 = require("typescript");
const path_1 = __importDefault(require("path"));
class TypeUtils {
    /**
     * performing symbol analysis on the original abstract syntax tree can cause sourcemap errors
     * @param oldAst
     *
     */
    static createNewSourceFile(oldAst) {
        let printer = typescript_1.createPrinter();
        let content = printer.printFile(oldAst);
        const fileSuffix = '.ts';
        const { dir, name } = path_1.default.parse(oldAst.fileName);
        const targetName = path_1.default.join(dir, name) + '__tmp' + fileSuffix;
        return typescript_1.createSourceFile(targetName, content, typescript_1.ScriptTarget.ES2015, true);
    }
    static createChecker(ast) {
        const host = typescript_1.createCompilerHost({});
        const customHost = {
            getSourceFile(name, languageVersion) {
                if (name === ast.fileName) {
                    return ast;
                }
                else {
                    return host.getSourceFile(name, languageVersion);
                }
            },
            // optional
            getDefaultLibLocation: () => '',
            getDefaultLibFileName: () => '',
            writeFile: (filename, data) => {
            },
            getCurrentDirectory: () => '',
            useCaseSensitiveFileNames: host.useCaseSensitiveFileNames,
            getCanonicalFileName: host.getCanonicalFileName,
            getNewLine: host.getNewLine,
            fileExists: () => true,
            readFile: (name) => {
                return name === ast.fileName ? ast.text : host.readFile(name);
            },
            // must, read program.ts => createCompilerHost
            directoryExists: undefined,
            getEnvironmentVariable: undefined,
            getDirectories: undefined,
        };
        let option = {};
        if (ast.fileName.endsWith('.js')) {
            option.allowJs = true;
        }
        let program = typescript_1.createProgram([ast.fileName], option, customHost);
        return program.getTypeChecker();
    }
}
exports.TypeUtils = TypeUtils;
//# sourceMappingURL=TypeUtils.js.map