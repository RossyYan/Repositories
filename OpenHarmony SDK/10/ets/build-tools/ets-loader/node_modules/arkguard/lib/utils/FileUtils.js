"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileUtils = void 0;
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
class FileUtils {
    /**
     * Read file and return content
     *
     * @param filePath file path
     */
    static readFile(filePath) {
        if (!fs_1.existsSync(filePath)) {
            console.error(`File <${this.getFileName(filePath)} is not found.>`);
            return undefined;
        }
        return fs_1.readFileSync(filePath, 'utf-8');
    }
    /**
     * Read file and convert to json object.
     *
     * @param filePath file path
     */
    static readFileAsJson(filePath) {
        if (!fs_1.existsSync(filePath)) {
            console.error(`File <${this.getFileName(filePath)} is not found.>`);
            return undefined;
        }
        try {
            return fs_extra_1.readJsonSync(filePath);
        }
        catch (e) {
            console.error('json file read error: ' + filePath);
            return undefined;
        }
    }
    /**
     * Get File Name
     *
     * @param filePath file path
     */
    static getFileName(filePath) {
        if (!filePath) {
            return undefined;
        }
        const lastSepIndex = filePath.lastIndexOf('/');
        if (lastSepIndex >= 0) {
            return filePath.slice(lastSepIndex + 1);
        }
        return filePath.slice(filePath.lastIndexOf('\\') + 1);
    }
    /**
     * Get suffix of a file.
     *
     * @param filePath file path
     */
    static getFileExtension(filePath) {
        if (!filePath || !filePath.includes('.')) {
            return undefined;
        }
        // get file name
        let fileName = this.getFileName(filePath);
        if (!fileName.includes('.')) {
            return undefined;
        }
        return fileName.slice(fileName.lastIndexOf('.') + 1);
    }
    static writeFile(filePath, content) {
        fs_1.writeFileSync(filePath, content);
    }
    /**
     * get prefix of directory
     * @param dirPath
     */
    static getPrefix(dirPath) {
        if (!dirPath || (!dirPath.includes('/') && !dirPath.includes('\\'))) {
            return undefined;
        }
        const sepIndex = dirPath.lastIndexOf('/');
        if (sepIndex >= 0) {
            return dirPath.slice(0, sepIndex + 1);
        }
        return dirPath.slice(0, dirPath.lastIndexOf('\\') + 1);
    }
    static getPathWithoutPrefix(filePath, prefix) {
        if (!filePath.startsWith(prefix)) {
            return filePath;
        }
        return filePath.slice(prefix.length);
    }
}
exports.FileUtils = FileUtils;
//# sourceMappingURL=FileUtils.js.map