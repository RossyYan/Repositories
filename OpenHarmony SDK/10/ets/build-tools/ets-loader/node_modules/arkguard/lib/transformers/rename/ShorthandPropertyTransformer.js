"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const typescript_1 = require("typescript");
const NodeUtils_1 = require("../../utils/NodeUtils");
var secharmony;
(function (secharmony) {
    const createShorthandPropertyTransformerFactory = function (option) {
        let profile = option.mNameObfuscation;
        if (!profile || !profile.mEnable) {
            return null;
        }
        return shorthandPropertyTransformFactory;
        function shorthandPropertyTransformFactory(context) {
            return shorthandPropertyTransformer;
            function shorthandPropertyTransformer(node) {
                return typescript_1.setParentRecursive(transformShortHandProperty(node), true);
            }
            function transformShortHandProperty(node) {
                /**
                 * ShortHandProperty example:
                 * `let name = 'hello;`
                 * `let info = {name};`
                 */
                if (typescript_1.isShorthandPropertyAssignment((node))) {
                    // update parent
                    return typescript_1.factory.createPropertyAssignment(typescript_1.factory.createIdentifier(node.name.text), node.name);
                }
                /**
                 * orinal ObjectBinding:
                 * `const { x, y } = { x: 1, y: 2 };`
                 * `const { x: a, y: b} = { x, y };`
                 * obfuscated ObjectBinding:
                 * `const { x: a, y: b } = { x: 1, y: 2 };`
                 * `const { x: c, y: d } = { x: a, y: b };`
                 */
                if (typescript_1.isObjectBindingPattern(node) && NodeUtils_1.NodeUtils.isObjectBindingPatternAssignment(node)) {
                    return node;
                }
                /**
                 * exclude, eg {name, ...rest}= {'name': 'akira', age : 22}
                 * exclude, eg let [name, age] = ['akira', 22];
                 */
                if (isElementsInObjectBindingPattern(node) && !node.propertyName && !node.dotDotDotToken) {
                    return typescript_1.factory.createBindingElement(node.dotDotDotToken, typescript_1.factory.createIdentifier(node.name.text), node.name, node.initializer);
                }
                return typescript_1.visitEachChild(node, transformShortHandProperty, context);
            }
            function isElementsInObjectBindingPattern(node) {
                return node.parent && typescript_1.isObjectBindingPattern(node.parent) && typescript_1.isBindingElement(node);
            }
        }
    };
    const TRANSFORMER_ORDER = 0;
    secharmony.transformerPlugin = {
        'name': 'ShortHandPropertyTransformer',
        'order': (1 << TRANSFORMER_ORDER),
        'createTransformerFactory': createShorthandPropertyTransformerFactory,
    };
})(secharmony || (secharmony = {}));
module.exports = secharmony;
//# sourceMappingURL=ShorthandPropertyTransformer.js.map