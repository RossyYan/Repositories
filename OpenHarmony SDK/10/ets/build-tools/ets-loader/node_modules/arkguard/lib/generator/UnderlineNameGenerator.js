"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnderlineNameGenerator = void 0;
/**
 * @Desc: a name generator which use underline to get obfuscated name
 */
class UnderlineNameGenerator {
    constructor(options) {
        const maxValue = 128;
        this.mMaxLength = (options && options.underlineMaxLength) ? options.underlineMaxLength : maxValue;
        this.mReservedNames = options === null || options === void 0 ? void 0 : options.reservedNames;
        this.mCurrentLength = 1;
    }
    /**
     * @return: null for end
     */
    getName() {
        var _a;
        if (this.mCurrentLength > this.mMaxLength) {
            return null;
        }
        let targetStr = '_'.repeat(this.mCurrentLength);
        this.mCurrentLength += 1;
        if ((_a = this.mReservedNames) === null || _a === void 0 ? void 0 : _a.has(targetStr)) {
            return this.getName();
        }
        return targetStr;
    }
    reset() {
        this.mCurrentLength = 1;
    }
}
exports.UnderlineNameGenerator = UnderlineNameGenerator;
//# sourceMappingURL=UnderlineNameGenerator.js.map