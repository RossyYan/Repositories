"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getObjectProperties = exports.getEnumProperties = exports.getClassProperties = exports.getInterfaceProperties = exports.getTypeAliasProperties = exports.getElementAccessExpressionProperties = exports.collectPropertyNamesAndStrings = exports.isViewPUBasedClass = exports.findOhImportStatement = exports.stringPropsSet = void 0;
const typescript_1 = require("typescript");
const TransformUtil_1 = require("./TransformUtil");
exports.stringPropsSet = new Set();
/**
 * find openHarmony module import statement
 * example:
 *  jsbundle - var _ohos = _interopRequireDefault(requireModule('@ohos.hilog'));
 *  esmodule - var hilog = globalThis.requireNapi('hilog') || ...
 *
 * @param node
 * @param moduleName full name of imported module, must check format before called, example:
 *  - '@ohos.hilog'
 *  - '@ohos.application.Ability'
 */
function findOhImportStatement(node, moduleName) {
    if (!typescript_1.isVariableStatement(node) || node.declarationList.declarations.length !== 1) {
        return TransformUtil_1.OhPackType.NONE;
    }
    const initializer = node.declarationList.declarations[0].initializer;
    if (initializer === undefined) {
        return TransformUtil_1.OhPackType.NONE;
    }
    /** esmodule */
    if (typescript_1.isBinaryExpression(initializer)) {
        if (initializer.operatorToken.kind !== typescript_1.SyntaxKind.BarBarToken) {
            return TransformUtil_1.OhPackType.NONE;
        }
        if (!typescript_1.isCallExpression(initializer.left)) {
            return TransformUtil_1.OhPackType.NONE;
        }
        if (!typescript_1.isPropertyAccessExpression(initializer.left.expression)) {
            return TransformUtil_1.OhPackType.NONE;
        }
        if (!typescript_1.isIdentifier(initializer.left.expression.expression) ||
            initializer.left.expression.expression.text !== 'globalThis') {
            return TransformUtil_1.OhPackType.NONE;
        }
        if (!typescript_1.isIdentifier(initializer.left.expression.name) ||
            initializer.left.expression.name.text !== 'requireNapi') {
            return TransformUtil_1.OhPackType.NONE;
        }
        if (initializer.left.arguments.length !== 1) {
            return TransformUtil_1.OhPackType.NONE;
        }
        const arg = initializer.left.arguments[0];
        if (typescript_1.isStringLiteral(arg) && arg.text === moduleName.substring('@ohos.'.length)) {
            return TransformUtil_1.OhPackType.ES_MODULE;
        }
    }
    /** jsbundle */
    if (typescript_1.isCallExpression(initializer)) {
        if (initializer.arguments.length !== 1) {
            return TransformUtil_1.OhPackType.NONE;
        }
        if (!typescript_1.isIdentifier(initializer.expression) ||
            initializer.expression.text !== '_interopRequireDefault') {
            return TransformUtil_1.OhPackType.NONE;
        }
        const arg = initializer.arguments[0];
        if (!typescript_1.isCallExpression(arg)) {
            return TransformUtil_1.OhPackType.NONE;
        }
        if (!typescript_1.isIdentifier(arg.expression) || arg.expression.text !== 'requireModule') {
            return TransformUtil_1.OhPackType.NONE;
        }
        const innerArg = arg.arguments[0];
        if (!typescript_1.isStringLiteral(innerArg) || innerArg.text !== moduleName) {
            return TransformUtil_1.OhPackType.NONE;
        }
        return TransformUtil_1.OhPackType.JS_BUNDLE;
    }
    return TransformUtil_1.OhPackType.NONE;
}
exports.findOhImportStatement = findOhImportStatement;
function containViewPU(heritageClauses) {
    if (!heritageClauses) {
        return false;
    }
    let hasViewPU = false;
    heritageClauses.forEach((heritageClause) => {
        if (!heritageClause || !heritageClause.types) {
            return;
        }
        const types = heritageClause.types;
        types.forEach((typeExpression) => {
            if (!typeExpression || !typeExpression.expression) {
                return;
            }
            const expression = typeExpression.expression;
            if (typescript_1.isIdentifier(expression) && expression.text === 'ViewPU') {
                hasViewPU = true;
            }
        });
    });
    return hasViewPU;
}
/**
 * used to ignore user defined ui component class property name
 * @param classNode
 */
function isViewPUBasedClass(classNode) {
    if (!classNode) {
        return false;
    }
    if (!typescript_1.isClassDeclaration(classNode)) {
        return false;
    }
    const heritageClause = classNode.heritageClauses;
    return containViewPU(heritageClause);
}
exports.isViewPUBasedClass = isViewPUBasedClass;
function collectPropertyNamesAndStrings(memberName, propertySet) {
    if (typescript_1.isIdentifier(memberName)) {
        propertySet.add(memberName.text);
    }
    if (typescript_1.isStringLiteral(memberName)) {
        propertySet.add(memberName.text);
        exports.stringPropsSet.add(memberName.text);
    }
    if (typescript_1.isComputedPropertyName(memberName) && typescript_1.isStringLiteral(memberName.expression)) {
        propertySet.add(memberName.expression.text);
        exports.stringPropsSet.add(memberName.expression.text);
    }
}
exports.collectPropertyNamesAndStrings = collectPropertyNamesAndStrings;
function getElementAccessExpressionProperties(elementAccessExpressionNode, propertySet) {
    if (!elementAccessExpressionNode || !elementAccessExpressionNode.argumentExpression) {
        return;
    }
    if (typescript_1.isStringLiteral(elementAccessExpressionNode.argumentExpression)) {
        exports.stringPropsSet.add(elementAccessExpressionNode.argumentExpression.text);
    }
}
exports.getElementAccessExpressionProperties = getElementAccessExpressionProperties;
function getTypeAliasProperties(typeAliasNode, propertySet) {
    if (!typeAliasNode || !typeAliasNode.type || !typescript_1.isTypeLiteralNode(typeAliasNode.type)) {
        return;
    }
    typeAliasNode.type.members.forEach((member) => {
        if (!member || !member.name) {
            return;
        }
        let memberName = member.name;
        collectPropertyNamesAndStrings(memberName, propertySet);
    });
}
exports.getTypeAliasProperties = getTypeAliasProperties;
/**
 * export interface interfaceName {
 *  a1: number;
 *  "a2": number;
 *  ["a3"]: number;
 * }
 */
function getInterfaceProperties(interfaceNode, propertySet) {
    if (!interfaceNode || !interfaceNode.members) {
        return;
    }
    interfaceNode.members.forEach((member) => {
        if (!member || !member.name) {
            return;
        }
        let memberName = member.name;
        collectPropertyNamesAndStrings(memberName, propertySet);
    });
}
exports.getInterfaceProperties = getInterfaceProperties;
function isParameterPropertyModifier(modifier) {
    if (modifier.kind === typescript_1.SyntaxKind.PublicKeyword ||
        modifier.kind === typescript_1.SyntaxKind.PrivateKeyword ||
        modifier.kind === typescript_1.SyntaxKind.ProtectedKeyword ||
        modifier.kind === typescript_1.SyntaxKind.ReadonlyKeyword) {
        return true;
    }
    return false;
}
function getClassProperties(classNode, propertySet) {
    if (!classNode || !classNode.members) {
        return;
    }
    classNode.members.forEach((member) => {
        if (!member) {
            return;
        }
        const memberName = member.name;
        if (memberName) {
            collectPropertyNamesAndStrings(memberName, propertySet);
        }
        if (typescript_1.isConstructorDeclaration(member) && member.parameters) {
            member.parameters.forEach((parameter) => {
                if (typescript_1.isParameter(parameter) && parameter.modifiers) {
                    parameter.modifiers.forEach((modifier) => {
                        if (isParameterPropertyModifier(modifier) && parameter.name && typescript_1.isIdentifier(parameter.name)) {
                            propertySet.add(parameter.name.text);
                        }
                    });
                    processMemberInitializer(parameter.initializer, propertySet);
                }
            });
            if (member.body) {
                member.body.statements.forEach((statement) => {
                    if (typescript_1.isExpressionStatement(statement) && typescript_1.isBinaryExpression(statement.expression) &&
                        statement.expression.operatorToken.kind === typescript_1.SyntaxKind.EqualsToken) {
                        processMemberInitializer(statement.expression.right, propertySet);
                    }
                });
            }
        }
        if (!typescript_1.isPropertyDeclaration(member) || !member.initializer) {
            return;
        }
        processMemberInitializer(member.initializer, propertySet);
    });
    return;
}
exports.getClassProperties = getClassProperties;
function processMemberInitializer(memberInitializer, propertySet) {
    if (!memberInitializer) {
        return;
    }
    if (typescript_1.isObjectLiteralExpression(memberInitializer)) {
        getObjectProperties(memberInitializer, propertySet);
        return;
    }
    if (typescript_1.isClassDeclaration(memberInitializer) || typescript_1.isClassExpression(memberInitializer) || typescript_1.isStructDeclaration(memberInitializer)) {
        getClassProperties(memberInitializer, propertySet);
        return;
    }
    if (typescript_1.isEnumDeclaration(memberInitializer)) {
        getEnumProperties(memberInitializer, propertySet);
        return;
    }
}
function getEnumProperties(enumNode, propertySet) {
    if (!enumNode || !enumNode.members) {
        return;
    }
    enumNode.members.forEach((member) => {
        if (!member || !member.name) {
            return;
        }
        const memberName = member.name;
        collectPropertyNamesAndStrings(memberName, propertySet);
        //other kind ignore
    });
    return;
}
exports.getEnumProperties = getEnumProperties;
function getObjectProperties(objNode, propertySet) {
    if (!objNode || !objNode.properties) {
        return;
    }
    objNode.properties.forEach((propertyElement) => {
        if (!propertyElement || !propertyElement.name) {
            return;
        }
        const propertyName = propertyElement.name;
        collectPropertyNamesAndStrings(propertyName, propertySet);
        //extract class element's property, example: export const hello = {info={read: {}}}
        if (!typescript_1.isPropertyAssignment(propertyElement) || !propertyElement.initializer) {
            return;
        }
        if (typescript_1.isObjectLiteralExpression(propertyElement.initializer)) {
            getObjectProperties(propertyElement.initializer, propertySet);
            return;
        }
        if (typescript_1.isClassDeclaration(propertyElement.initializer)) {
            getClassProperties(propertyElement.initializer, propertySet);
            return;
        }
        if (typescript_1.isEnumDeclaration(propertyElement.initializer)) {
            getEnumProperties(propertyElement.initializer, propertySet);
            return;
        }
    });
    return;
}
exports.getObjectProperties = getObjectProperties;
//# sourceMappingURL=OhsUtil.js.map