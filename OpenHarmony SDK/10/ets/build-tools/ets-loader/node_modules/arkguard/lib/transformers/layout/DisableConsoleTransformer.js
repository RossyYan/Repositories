"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const typescript_1 = require("typescript");
var secharmony;
(function (secharmony) {
    const TRANSFORMER_ORDER = 1;
    secharmony.transformerPlugin = {
        'name': 'disableConsolePlugin',
        'order': (1 << TRANSFORMER_ORDER),
        'createTransformerFactory': createDisableConsoleFactory
    };
    function createDisableConsoleFactory(option) {
        if (!option.mDisableConsole) {
            return null;
        }
        return disableConsoleFactory;
        function disableConsoleFactory(context) {
            return transformer;
            function transformer(node) {
                if (!typescript_1.isSourceFile(node) || node.fileName.endsWith('.d.ts')) {
                    return node;
                }
                let resultAst = visitAst(node);
                return typescript_1.setParentRecursive(resultAst, true);
            }
            /**
             * delete console log print expression, only support simple format like:
             *  - console.xxx();
             *  - console['xxx']();
             * @param node
             */
            function visitAst(node) {
                if (typescript_1.isSourceFile(node)) {
                    const visitedAst = typescript_1.visitEachChild(node, visitAst, context);
                    const deletedStatements = deleteConsoleStatement(visitedAst.statements);
                    return typescript_1.factory.updateSourceFile(node, deletedStatements);
                }
                if (!typescript_1.isBlock(node)) {
                    return typescript_1.visitEachChild(node, visitAst, context);
                }
                const visitedBlock = typescript_1.visitEachChild(node, visitAst, context);
                const newStatements = deleteConsoleStatement(visitedBlock.statements);
                return typescript_1.factory.createBlock(newStatements, true);
            }
            function deleteConsoleStatement(statements) {
                const reservedStatements = [];
                statements.forEach((child) => {
                    if (!isSimpleConsoleStatement(child)) {
                        reservedStatements.push(child);
                    }
                });
                return reservedStatements;
            }
            function isSimpleConsoleStatement(node) {
                if (!typescript_1.isExpressionStatement(node)) {
                    return false;
                }
                if (!node.expression || !typescript_1.isCallExpression(node.expression)) {
                    return false;
                }
                const expressionCalled = node.expression.expression;
                if (!expressionCalled) {
                    return false;
                }
                if (typescript_1.isPropertyAccessExpression(expressionCalled) && expressionCalled.expression) {
                    if (typescript_1.isIdentifier(expressionCalled.expression) && expressionCalled.expression.text === 'console') {
                        return true;
                    }
                }
                if (typescript_1.isElementAccessExpression(expressionCalled) && expressionCalled.expression) {
                    if (typescript_1.isIdentifier(expressionCalled.expression) && expressionCalled.expression.text === 'console') {
                        return true;
                    }
                }
                return false;
            }
        }
    }
    secharmony.createDisableConsoleFactory = createDisableConsoleFactory;
})(secharmony || (secharmony = {}));
module.exports = secharmony;
//# sourceMappingURL=DisableConsoleTransformer.js.map