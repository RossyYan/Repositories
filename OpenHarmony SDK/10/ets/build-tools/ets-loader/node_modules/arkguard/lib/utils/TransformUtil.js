"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSuperCallStatement = exports.isCommentedNode = exports.OhPackType = exports.collectIdentifiers = exports.collectExistNames = void 0;
const typescript_1 = require("typescript");
/**
 * collect exist identifier names in current source file
 * @param sourceFile
 */
function collectExistNames(sourceFile) {
    const identifiers = new Set();
    let visit = (node) => {
        if (typescript_1.isIdentifier(node)) {
            identifiers.add(node.text);
        }
        typescript_1.forEachChild(node, visit);
    };
    typescript_1.forEachChild(sourceFile, visit);
    return identifiers;
}
exports.collectExistNames = collectExistNames;
/**
 * collect exist identifiers in current source file
 * @param sourceFile
 * @param context
 */
function collectIdentifiers(sourceFile, context) {
    const identifiers = [];
    let visit = (node) => {
        if (!typescript_1.isIdentifier(node) || !node.parent) {
            return typescript_1.visitEachChild(node, visit, context);
        }
        identifiers.push(node);
        return node;
    };
    visit(sourceFile);
    return identifiers;
}
exports.collectIdentifiers = collectIdentifiers;
var OhPackType;
(function (OhPackType) {
    OhPackType[OhPackType["NONE"] = 0] = "NONE";
    OhPackType[OhPackType["JS_BUNDLE"] = 1] = "JS_BUNDLE";
    OhPackType[OhPackType["ES_MODULE"] = 2] = "ES_MODULE";
})(OhPackType = exports.OhPackType || (exports.OhPackType = {}));
function isCommentedNode(node, sourceFile) {
    const ranges = typescript_1.getLeadingCommentRangesOfNode(node, sourceFile);
    return ranges !== undefined;
}
exports.isCommentedNode = isCommentedNode;
function isSuperCallStatement(node) {
    return typescript_1.isExpressionStatement(node) &&
        typescript_1.isCallExpression(node.expression) &&
        node.expression.expression.kind === typescript_1.SyntaxKind.SuperKeyword;
}
exports.isSuperCallStatement = isSuperCallStatement;
//# sourceMappingURL=TransformUtil.js.map