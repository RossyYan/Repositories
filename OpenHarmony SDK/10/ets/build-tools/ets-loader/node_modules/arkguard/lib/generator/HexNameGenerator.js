"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.HexNameGenerator = void 0;
const crypto_1 = require("crypto");
/**
 * @Desc: a name generator which used given length to generate random length-limiting name
 */
class HexNameGenerator {
    /**
     * constructor for hex name generator
     * @param options: {hexLength: number}
     */
    constructor(options) {
        this.mHexLength = 4;
        if (options && options.hexLength) {
            this.mHexLength = options.hexLength;
        }
        this.mWithPrefixSuffix = options && options.hexWithPrefixSuffix;
        this.mReservedNames = options === null || options === void 0 ? void 0 : options.reservedNames;
        this.mHexPrefix = '_0x';
        this.mHexSuffix = '_';
        this.mHistoryNameList = [];
    }
    generateName() {
        let buffer = crypto_1.randomBytes(this.mHexLength);
        let generatedName = buffer.toString('hex');
        if (this.mWithPrefixSuffix) {
            return this.mHexPrefix + generatedName + this.mHexSuffix;
        }
        return generatedName;
    }
    /**
     * @return: null for end
     */
    getName() {
        var _a;
        while (true) {
            let generatedName = this.generateName();
            if (!this.mHistoryNameList.includes(generatedName) && !((_a = this.mReservedNames) === null || _a === void 0 ? void 0 : _a.has(generatedName))) {
                this.mHistoryNameList.push(generatedName);
                return generatedName;
            }
            const baseHex = 16;
            if (this.mHistoryNameList.length >= Math.pow(baseHex, this.mHexLength)) {
                return null;
            }
        }
    }
    reset() {
        this.mHistoryNameList.length = 0;
    }
}
exports.HexNameGenerator = HexNameGenerator;
//# sourceMappingURL=HexNameGenerator.js.map