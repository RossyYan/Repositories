"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNameGenerator = exports.NameGeneratorType = void 0;
const OrderedNameGenerator_1 = require("./OrderedNameGenerator");
const DisorderNameGenerator_1 = require("./DisorderNameGenerator");
const HexNameGenerator_1 = require("./HexNameGenerator");
const DictionaryNameGenerator_1 = require("./DictionaryNameGenerator");
const ReservedNameGenerator_1 = require("./ReservedNameGenerator");
const UnderlineNameGenerator_1 = require("./UnderlineNameGenerator");
var NameGeneratorType;
(function (NameGeneratorType) {
    NameGeneratorType[NameGeneratorType["ORDERED"] = 1] = "ORDERED";
    NameGeneratorType[NameGeneratorType["DISORDERED"] = 2] = "DISORDERED";
    NameGeneratorType[NameGeneratorType["HEX"] = 3] = "HEX";
    NameGeneratorType[NameGeneratorType["DICTIONARY"] = 4] = "DICTIONARY";
    NameGeneratorType[NameGeneratorType["RESERVED_NAME"] = 5] = "RESERVED_NAME";
    NameGeneratorType[NameGeneratorType["UNDERLINE"] = 6] = "UNDERLINE";
})(NameGeneratorType = exports.NameGeneratorType || (exports.NameGeneratorType = {}));
function getNameGenerator(generatorType, options) {
    // 10 branch is max in switch
    switch (generatorType) {
        case NameGeneratorType.ORDERED:
            return new OrderedNameGenerator_1.OrderedNameGenerator(options);
        case NameGeneratorType.DISORDERED:
            return new DisorderNameGenerator_1.DisorderNameGenerator(options);
        case NameGeneratorType.HEX:
            return new HexNameGenerator_1.HexNameGenerator(options);
        case NameGeneratorType.DICTIONARY:
            return new DictionaryNameGenerator_1.DictionaryNameGenerator(options);
        case NameGeneratorType.RESERVED_NAME:
            return new ReservedNameGenerator_1.ReservedNameGenerator(options);
        case NameGeneratorType.UNDERLINE:
            return new UnderlineNameGenerator_1.UnderlineNameGenerator(options);
        default:
            console.error('name generator type in getGenerator() is not support');
            return new OrderedNameGenerator_1.OrderedNameGenerator(options);
    }
}
exports.getNameGenerator = getNameGenerator;
//# sourceMappingURL=NameFactory.js.map