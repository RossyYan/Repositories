import type { Printer, RawSourceMap, SourceFile } from 'typescript';
import sourceMap from 'source-map';
import type { IOptions } from './configs/IOptions';
import { getMapFromJson } from './utils/NameCacheUtil';
import { readProjectProperties } from './common/ApiReader';
import { ApiExtractor } from './common/ApiExtractor';
export declare const renameIdentifierModule: any;
export declare const renamePropertyModule: any;
export { getMapFromJson, readProjectProperties };
declare type ObfuscationResultType = {
    content: string;
    sourceMap?: RawSourceMap;
    nameCache?: {
        [k: string]: string;
    };
};
export declare class ArkObfuscator {
    private mTextWriter;
    private readonly mSourceFiles;
    private readonly mConfigPath;
    private readonly mCompilerOptions;
    private mCustomProfiles;
    private mTransformers;
    constructor(sourceFiles?: string[], configPath?: string);
    /**
     * init ArkObfuscator according to user config
     * should be called after constructor
     */
    init(config?: IOptions): boolean;
    /**
     * Obfuscate all the source files.
     */
    obfuscateFiles(): Promise<void>;
    /**
     * obfuscate directory
     * @private
     */
    private obfuscateDir;
    private readNameCache;
    private readPropertyCache;
    private produceNameCache;
    private producePropertyCache;
    mergeSourceMap(originMap: sourceMap.RawSourceMap, newMap: sourceMap.RawSourceMap): Promise<RawSourceMap>;
    /**
     * A Printer to output obfuscated codes.
     */
    createObfsPrinter(): Printer;
    private isObfsIgnoreFile;
    /**
     * Obfuscate single source file with path provided
     *
     * @param sourceFilePath single source file path
     * @param outputDir
     */
    obfuscateFile(sourceFilePath: string, outputDir: string): Promise<void>;
    /**
     * Obfuscate ast of a file.
     * @param content ast or source code of a source file
     * @param sourceFilePath
     * @param previousStageSourceMap
     * @param historyNameCache
     */
    obfuscate(content: SourceFile | string, sourceFilePath: string, previousStageSourceMap?: sourceMap.RawSourceMap, historyNameCache?: Map<string, string>): Promise<ObfuscationResultType>;
}
export { ApiExtractor };
