"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransformerManager = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
class TransformerManager {
    constructor() {
        this.mTransformers = [];
    }
    static getInstance() {
        if (!this.sInstance) {
            this.sInstance = new TransformerManager();
        }
        return this.sInstance;
    }
    loadTransformers(options) {
        var _a;
        let subFiles = fs_1.readdirSync(TransformerManager.sLoadPath);
        let plugins = [];
        for (const subFile of subFiles) {
            let subPath = path_1.resolve(TransformerManager.sLoadPath + '/' + subFile);
            let isDir = (_a = fs_1.lstatSync(subPath)) === null || _a === void 0 ? void 0 : _a.isDirectory();
            if (!isDir) {
                continue;
            }
            let subDir = fs_1.readdirSync(subPath);
            for (const file of subDir) {
                if (!file.endsWith('.ts')) {
                    continue;
                }
                const fileNameNoSuffix = file.lastIndexOf('.d.ts') > -1 ? file.slice(0, file.lastIndexOf('.d.ts')) : file.slice(0, file.lastIndexOf('.ts'));
                let path = path_1.join(subPath, fileNameNoSuffix);
                let module = require(path);
                let plugin = module === null || module === void 0 ? void 0 : module.transformerPlugin;
                if (plugin) {
                    plugins.push(plugin);
                }
            }
        }
        plugins.sort((plugin1, plugin2) => {
            return plugin1.order - plugin2.order;
        });
        plugins.forEach((plugin) => {
            let transformerFactory = plugin === null || plugin === void 0 ? void 0 : plugin.createTransformerFactory(options);
            let name = plugin === null || plugin === void 0 ? void 0 : plugin.name;
            if (transformerFactory && name) {
                this.mTransformers.push(transformerFactory);
            }
        });
        return this.mTransformers;
    }
}
exports.TransformerManager = TransformerManager;
TransformerManager.sInstance = null;
TransformerManager.sLoadPath = path_1.join(__dirname, '../', 'transformers');
//# sourceMappingURL=TransformerManager.js.map