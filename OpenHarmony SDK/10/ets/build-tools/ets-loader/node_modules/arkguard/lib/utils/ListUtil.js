"use strict";
/*
 * Copyright (c) 2023 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListUtil = void 0;
const crypto = __importStar(require("crypto"));
class ListUtil {
    /**
     * get a list with element number filled for each element
     * @param length: list length you want init.
     */
    static getInitList(length) {
        if (isNaN(length) || length < 0 || length > this.MAX_INIT_LEN) {
            console.error(`array init length is invalid, should in range: [0, ${this.MAX_INIT_LEN}]`);
            return [];
        }
        return Array(length).fill(null).map((_, h) => h);
    }
    /**
     * shuffle list
     * @param originList: list to be shuffled
     */
    static shuffle(originList) {
        if (!originList) {
            return;
        }
        for (let i = originList.length; i > 0; i--) {
            let j = crypto.randomInt(originList.length);
            [originList[i - 1], originList[j]] = [originList[j], originList[i - 1]];
        }
    }
    /**
     * merge two list to one list of unique element
     * @param listA
     * @param listB
     * @param listC
     */
    static uniqueMergeList(listA, listB, listC) {
        const firstList = listA ? listA : [];
        const secondList = listB ? listB : [];
        const thirdList = listC ? listC : [];
        const tmpList = thirdList ? [...firstList, ...secondList, ...thirdList] : [...firstList, ...secondList];
        const elementSet = new Set(tmpList);
        return Array.from(elementSet);
    }
}
exports.ListUtil = ListUtil;
ListUtil.MAX_INIT_LEN = 0xFFFF;
//# sourceMappingURL=ListUtil.js.map